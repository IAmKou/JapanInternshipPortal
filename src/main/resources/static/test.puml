@startuml
actor Teacher
activate Teacher
participant AssignmentController
participant AssignmentService
participant S3Service
participant TeacherRepository
participant AssignmentRepository
participant ClassRepository
participant AssignmentClassRepository
participant AssignmentStudentRepository
participant NotificationService
participant EmailService
participant S3Bucket
participant ExternalEmailServer
participant Database

Teacher -> AssignmentController :1. POST /create
activate AssignmentController

AssignmentController -> AssignmentService :2. createAssignment(request, teacher_id)
activate AssignmentService

AssignmentService -> TeacherRepository :3. findByAccount_id(teacher_id)
activate TeacherRepository
TeacherRepository -> Database :3.1. Query Teacher by account_id
activate Database
Database --> TeacherRepository :3.2. Return Teacher entity
TeacherRepository --> AssignmentService :4. Return Teacher entity
deactivate TeacherRepository
alt Teacher found
    AssignmentService -> AssignmentService: Map request to Assignment
    AssignmentService -> S3Service: uploadFilesToFolder(imgFiles, folderName)
    activate S3Service
    S3Service -> S3Bucket: Upload files
    deactivate S3Service
    activate S3Bucket
    AssignmentService -> AssignmentRepository : save(assignment)
    deactivate S3Bucket
    activate AssignmentRepository
    AssignmentRepository -> Database : Save Assignment
    Database --> AssignmentRepository : Assignment Saved
    AssignmentRepository --> AssignmentService : Return Saved Assignment
    deactivate AssignmentRepository
    AssignmentService -> ClassRepository : findById(classId)
    activate ClassRepository
    ClassRepository -> Database : Query Class by classId
    Database --> ClassRepository : Return Class entity
    ClassRepository --> AssignmentService : Return Class entity
    deactivate ClassRepository
    AssignmentService -> AssignmentClassRepository : save(AssignmentClass)
    activate AssignmentClassRepository
    AssignmentClassRepository -> Database: save AssignmentClass
    deactivate AssignmentClassRepository

    loop for each student in Class
        AssignmentService -> AssignmentStudentRepository : save(AssignmentStudent)
        activate AssignmentStudentRepository
        AssignmentStudentRepository -> Database : Save AssignmentStudent
        deactivate AssignmentStudentRepository
        AssignmentService -> NotificationService : createAutoNotificationForAssignment
        activate NotificationService
        NotificationService -> Database : Save Notification
        deactivate NotificationService
        AssignmentService -> EmailService : sendEmailCreateAssignment(studentEmail, className)
        activate EmailService
        EmailService -> ExternalEmailServer : Email Sent
        deactivate EmailService

    end

else Teacher not found
    AssignmentService -> AssignmentService : throw IllegalArgumentException
end

AssignmentService --> AssignmentController : Return ResponseEntity
deactivate AssignmentService

AssignmentController --> Teacher : Return ResponseEntity
deactivate AssignmentController
@enduml
